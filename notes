程序=数据结构+算法
一、时间复杂度：（数量级）
----------------------------------------
print('Hello World!')  # O(1) 1次基本操作
----------------------------------------
for i in range(n):
  print('Hello World!') # O(n) n次基本操作
----------------------------------------
for i in range(n):
  for j in range(n):
    print('Hello World!')  # O(n^2) 
----------------------------------------
for i in range(n):
  for j in range(n):
    for k in range(n):
      print('Hello World!') #O(n^3)
----------------------------------------
for i in range(n):
  print('Hello World!')
  for j in range(n);
    print('Hello World!')  # 不是O(n^2+n),而是O(n^2),n与n^2比起来不在一个数量级
----------------------------------------
while n>1:
  print(n)
  n=n//2 # 若n=64,输出64，32,16,8,4,2；2^6 = 64, log2(64)=6次循环；循环减半的情况: O(logn)或者O(log2(n))
----------------------------------------

二、常见的时间复杂度
O(1) < O(logn) < O(n) < O(nlogn)[内层循环减半] < O(n^2) < O(n^2 logn) < O(n^3)
另有一些复杂问题的时间复杂度：O(n!)  O(2^n)  O(n^n)
----------------------------------------
三、快速判断
--> 确定问题规模n
--> 循环减半 logn
--> k层关于n的循环 n^k
----------------------------------------
四、空间复杂度（评估算法内存占用大小）
--> 算法使用了几个变量 O(1)
--> 长度为n的一维列表 O(n)
--> m行n列的二维列表 O(mn)
“空间换时间”：宁可多占内存，也要加快时间，例如分布式计算。
----------------------------------------
五、递归
特点：调用自身+约束条件
例子：汉诺塔，把n个盘子从A经过B移动到C。
分3步：
--> 1. 把n-1个盘子从A经过C移动到B；
--> 2. 把第n个盘子从A移动到C；
--> 3. 把n-1个盘子从B经过A移动到C；
移动次数：h(x) = 2n(x-1)+1
----------------------------------------
六、列表查找（从列表中查找指定元素）
输入：列表，待查找元素
输出：元素下标（未找到则返回None或者-1）
内置函数 index() --> 线性查找
----------------------------------------
七、顺序查找（线性查找） 从头找到尾  O(n)
def linear_search(list,val):
  for index, v in enumerate(list):
    if v=val:
      return index
    else:
      return None
----------------------------------------
八、二分查找（折半查找） 要求是有序列表 O(logn)
def binary_search(list,val):
  left = 0
  right = len(list)-1
  while left<=right: #候选区有值
    mid = (left+right)//2
    if list[mid] = val:
      return mid
    elif list[mid]>val: #待查找的值在mid左侧
      right = mid-1
    else: #待查找的值在mid右侧
      left = mid + 1
  else:
    return None
----------------------------------------
九、列表排序  内置函数sort()
--> 排序Low B三人组：冒泡、选择、插入
--> 排序NB三人组：快排、堆排、归并
--> 其他排序： 希尔、计数、基数
----------------------------------------
十、冒泡排序
--> 列表每两个相邻的数，若前面比后面大，则交换
--> 一趟排序完成后，无序区减少一个数，有序区增加一个数
--> 整个算法走了n-1趟（n是列表长度）
时间复杂度：O(n^2)
空间复杂度：O(1)
问：总共比较了多少次？
第一趟：n-1次
第二趟：n-2次
...
第n-1趟：n-(n-1-1)-1=1次
等差数列求和：[(n-1)+1]*(n-1)/2 = n(n-1)/2
例：若n=4,第1趟3次，第2趟2次，第3趟1次，总共4*3/2=6次
----------------------------------------
十一、选择排序 （每次循环遍历找出最小值拎出来，放到第一个位置）
时间复杂度：O(n^2)
空间复杂度：O(1)
需要走n-1趟
有序区|无序区
--> 一趟排序记录最小的数，放到第一个位置；
--> 再一趟排序记录列表无序区最小的数，放到第二个位置；
--> ...
--> 算法关键点：有序区和无序区、无序区最小数的位置
----------------------------------------
十二、插入排序 （类似打牌时候的摸牌）
时间复杂度：O(n^2)
空间复杂度：O(1)
--> 初始时手里只有一张牌（有序区）；
--> 每次从无序区摸一张牌，插入到手里已有牌的正确位置；
----------------------------------------
十三、快速排序
时间复杂度：O(n*logn)
空间复杂度：O(1)
--> 取一个元素P（第一个元素），使得元素P归位；
--> 列表被P分成2部分，左边比P小，右边比P大；
--> 递归完成排序；
存在的问题：
--> 最坏情况下时间复杂度为O(n^2)，比如说逆序情况如9,8,7,6,5,4,3,2,1；
--> 递归；
----------------------------------------
十四、堆排序前传-树与二叉树
树是一种数据结构，如目录结构；
树是一种可以递归定义的数据结构；
树是由n个节点组成的集合：
--> 若n=0，则是空树；
--> 若n>0,则存在1个节点作为树的根节点，其他节点可以分为m个集合，每个集合本身又是一棵树；
二叉树：度不超过2，每个节点最多有2个子节点；
满二叉树：每一层节点都满的二叉树；
完全二叉树：叶节点只能出现在最下层和次下层，并且最下面一层的节点都集中在该层最左边若干位置的二叉树（就是按顺序堆进去）。
顺序存储方式（自上而下，从左到右）
父节点和左孩子节点编号下标关系：
--> 0~1,1~3,2~5,3~7,4~9
--> i~2i+1
父节点和右孩子节点编号下标关系：
--> 0~2,1~4,2~6,3~8,4~10
--> i~2i+2
孩子找父亲： (i-1)//2
----------------------------------------
十五、堆：一种特殊的完全二叉树
--> 大根堆：完全二叉树，任一节点都比其孩子节点大；
--> 小根堆：完全二叉树，任一节点都比其孩子节点小；
堆的向下调整性质（只有初始根节点有问题）
假设节点的左右子树都是堆，但自身不是堆：从上级往下级撸。
----------------------------------------
十六、堆排序过程 （挨个出数，末尾的上位，然后向下调整，循环往复）
--> 1. 建立堆（农村包围城市，从最后一级有孩子的级别开始调整）
--> 2. 得到堆顶元素，为最大元素；
--> 3. 去掉堆顶，将堆最后一个元素放到堆顶，此时可通过一次调整重新使堆有序；
--> 4. 堆顶元素为第二大元素；
--> 5. 重复步骤3，直到堆变空；
代码先写向下调整的函数sift(li,low,high)，再写堆排序过程函数heap_sort(li)。
时间复杂度：O(n*logn)
空间复杂度：O(1)
----------------------------------------
十七、堆排序-top k问题
现有n个数，设计算法得到前k大的数。（k<n）
解决思路：
--> 1. 排序后切片  O(nlogn)
--> 2. 排序LOW B三人组 O(kn)
--> 3. 堆排序  O(nlogk)
--> --> 取列表前k个元素建立一个小根堆，堆顶就是目前第k大的数；
--> --> 依次向后遍历原列表，对于列表中的元素，若小于堆顶则忽略该元素，若大于堆顶则将堆顶更换为该元素，并且对堆进行一次调整；
----------------------------------------
十八、归并排序
时间复杂度：O(n*logn)
空间复杂度：O(n)
--> 假设现在的列表分为两段有序列表，如何将其合成一个有序列表？例如：2，5,7,8,9|1,3,4,6
--> 这种操作称为一次归并；
方法：把两个列表逐个按次序比较，将较小的数拎出来按次序放于新列表，当有一个列表空了时，直接把另一个列表的剩余元素移下来；
使用归并：
--> 分解：把列表越分越小，直至分成一个元素（此时每个是有序的）
--> 终止条件：一个元素是有序的
--> 合并：将两个有序列表归并，列表越来越大，直到最终合成一个列表，完成排序。
----------------------------------------
十九、NB三人组小结
--> 时间复杂度都是 O(n*logn)
--> 运行时间： 快排<归并<堆排
--> 缺点：
--> --> 快排：极端情况下效率低 O(n^2);
--> --> 归并：需要额外的内存开销，空间复杂度是O(n);
--> --> 堆排：在快的排序算法中相对较慢；
排序方法|最坏时间复杂度|平均时间复杂度|最好时间复杂度|空间复杂度|稳定性（值相同的元素相对位置保持不变，排序时挨着比较交换的算法一般都是稳定的，飞着交换的就是不稳定的）
冒泡     O(n^2)        O(n^2)         O(n)         O(1)      稳定
选择     O(n^2)        O(n^2)         O(n^2)       O(1)      不稳定
插入     O(n^2)        O(n^2)         O(n^2)       O(1)      稳定
快排     O(n^2)        O(n*logn)      O(n*logn)    O(n*logn) 不稳定
堆排     O(n*logn)     O(n*logn)      O(n*logn)    O(1)      不稳定
归并     O(n*logn)     O(n*logn)      O(n*logn)    O(n)      稳定
----------------------------------------
二十、希尔排序
--> 是一种分组插入排序算法；
--> 首先取一个整数d1=n/2,将元素分为d1个小组，每个小组相邻两元素之间距离为d1,在各组内进行直接插入排序；
--> 取第2个整数d2=d1/2,重复上述分组排序过程，直到di=1,即所有元素在同一组内进行直接插入排序；
--> 希尔排序每一趟并不使某些元素有序，而是使得整体数据越来越接近有序，最后一趟排序使得所有数据有序；
例子：        5 7 4 6 3 1 2 9 8 
d1=9/2=4     5       3       8  --> 3     5      8
分4组          7       1        -->   1     7
                4       2       -->    2     4
                  6       9     -->      6     9
得到第一轮之后的排序： 3 1 2 6 5 7 4 9 8
下一轮d2 = d1/2 = 2，下下轮d3 = d2/2 = 1。重复以上操作。
时间复杂度较为复杂，和选取的gap序列有关（d1,d2,d3,...）。
最好时间复杂度：O(n*logn)
平均时间复杂度：O(n*(logn)^2)
最坏时间复杂度：O(n*(logn)^2)
----------------------------------------
二十一、计数排序
--> 对列表进行排序，已知列表中数的范围在0~100之间，设计时间复杂度为O(n)的算法。
例： 1 3 2 4 1 2 3 1 3 5 
元素值 计数 
0      0
1      3
2      2
3      3
4      1
5      1
然后直接依次输出相应计数个数的元素值： 1 1 1 2 2 3 3 3 4 5
----------------------------------------
二十二、桶排序
--> 在计数排序时候，若元素的范围比较大（如1~1亿），如何改造？
--> 桶排序，bucket sort：首先将元素分在不同的桶中，再对每个桶中的元素进行排序（这样桶的个数就比较可控）
例子：     29 25 3 49 9 37 21 43
桶：      0~9 10~19  20~29     30~39 40~49
放进桶里： 3,9       29,25,21   37    49,43
--> 桶排序的表现取决于数据分布，也就是需要对不同数据排序时采取不同的分桶策略。（分布均匀就比较好分桶）
--> 平均时间复杂度：O(n+k)
--> 最坏：O(n^2 * k)
--> 空间：O(nk)
----------------------------------------
二十三、基数排序
--> 多关键字排序：假如现在有一个员工表，要按照薪资排序，薪资相同员工按照年龄排序；
--> --> 先对年龄排序，再按照薪资进行稳定的排序；
--> 对32,13,94,52,17,54,93排序，是否可以按多关键字排序？
--> 类似的，先按各位排序，再按十位排序
